firebase_options.dart
```dart
// File generated by FlutterFire CLI.
// ignore_for_file: type=lint
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;

/// Default [FirebaseOptions] for use with your Firebase apps.
///
/// Example:
/// ```dart
/// import 'firebase_options.dart';
/// // ...
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform,
/// );
/// ```
class DefaultFirebaseOptions {
  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      return web;
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android;
      case TargetPlatform.iOS:
        return ios;
      case TargetPlatform.macOS:
        return macos;
      case TargetPlatform.windows:
        return windows;
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  static const FirebaseOptions web = FirebaseOptions(
    apiKey: 'AIzaSyAAqi9s6mH2XohvdNQ2__V4B7jR0rY-wSA',
    appId: '1:1077494402266:web:e29555cb47851f683c29e3',
    messagingSenderId: '1077494402266',
    projectId: 'ahmad-simple-task',
    authDomain: 'ahmad-simple-task.firebaseapp.com',
    storageBucket: 'ahmad-simple-task.appspot.com',
  );

  static const FirebaseOptions android = FirebaseOptions(
    apiKey: 'AIzaSyCvOvVVlNajb3IodiDY2whNk-pdL0EPfdA',
    appId: '1:1077494402266:android:109ff0b7bea462883c29e3',
    messagingSenderId: '1077494402266',
    projectId: 'ahmad-simple-task',
    storageBucket: 'ahmad-simple-task.appspot.com',
  );

  static const FirebaseOptions ios = FirebaseOptions(
    apiKey: 'AIzaSyC9twDRE6SBSXDBlMhuVcc2pBBZcTI7yCo',
    appId: '1:1077494402266:ios:fb761f13d509137b3c29e3',
    messagingSenderId: '1077494402266',
    projectId: 'ahmad-simple-task',
    storageBucket: 'ahmad-simple-task.appspot.com',
    iosBundleId: 'com.example.eolFinal',
  );

  static const FirebaseOptions macos = FirebaseOptions(
    apiKey: 'AIzaSyC9twDRE6SBSXDBlMhuVcc2pBBZcTI7yCo',
    appId: '1:1077494402266:ios:fb761f13d509137b3c29e3',
    messagingSenderId: '1077494402266',
    projectId: 'ahmad-simple-task',
    storageBucket: 'ahmad-simple-task.appspot.com',
    iosBundleId: 'com.example.eolFinal',
  );

  static const FirebaseOptions windows = FirebaseOptions(
    apiKey: 'AIzaSyAAqi9s6mH2XohvdNQ2__V4B7jR0rY-wSA',
    appId: '1:1077494402266:web:49c63e5dec8b95c03c29e3',
    messagingSenderId: '1077494402266',
    projectId: 'ahmad-simple-task',
    authDomain: 'ahmad-simple-task.firebaseapp.com',
    storageBucket: 'ahmad-simple-task.appspot.com',
  );
}

```
main.dart
```dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:firebase_core/firebase_core.dart';
import 'firebase_options.dart';
import 'routes/app_router.dart';
import 'services/firebase_service.dart';
import 'providers/aws_service_provider.dart';
import 'providers/migration_project_provider.dart';
import 'providers/employee_provider.dart';
import 'providers/theme_provider.dart';

Future<void> main() async {
  WidgetsFlutterBinding.ensureInitialized();
  
  // Initialize Firebase using the DefaultFirebaseOptions
  await Firebase.initializeApp(
    options: DefaultFirebaseOptions.currentPlatform,
  );
  
  // Initialize Firebase service
  await FirebaseService.initializeFirebase();
  
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MultiProvider(
      providers: [
        ChangeNotifierProvider(create: (_) => AwsServiceProvider()),
        ChangeNotifierProvider(create: (_) => MigrationProjectProvider()),
        ChangeNotifierProvider(create: (_) => EmployeeProvider()),
        ChangeNotifierProvider(create: (_) => ThemeProvider()),
      ],
      child: Consumer<ThemeProvider>(
        builder: (context, themeProvider, child) {
          return MaterialApp.router(
            title: 'AWS Migration Dashboard',
            theme: ThemeData.light(),
            darkTheme: ThemeData.dark(),
            themeMode: themeProvider.themeMode,
            routerConfig: AppRouter.router,
          );
        },
      ),
    );
  }
}

```
mock_data.dart
```dart
import 'models/aws_service.dart';
import 'models/migration_project.dart';
import 'models/employee.dart';

class MockData {
  static List<AwsService> awsServices = [
    AwsService(
      id: '1',
      name: 'Oracle 10G Database',
      type: 'Database',
      details: 'ALG Ambit Technical Upgrade',
      endOfSupportDeadline: DateTime(2013, 12, 31),
    ),
    AwsService(
      id: '2',
      name: 'Oracle 10G Database',
      type: 'Database',
      details: 'JOR Ambit Technical Upgrade',
      endOfSupportDeadline: DateTime(2013, 12, 31),
    ),
    AwsService(
      id: '3',
      name: 'Oracle T 5240 Servers',
      type: 'Server',
      details: 'JOR/ALG Ambit Technical Upgrade',
      endOfSupportDeadline: DateTime(2015, 12, 31),
    ),
    AwsService(
      id: '4',
      name: 'IBM Power Power HA 7.1 TL2',
      type: 'Server',
      details: 'ETL Upgrade',
      endOfSupportDeadline: DateTime(2016, 12, 31),
    ),
    AwsService(
      id: '5',
      name: 'RDS for MySQL 5.7',
      type: 'Database',
      details: 'Relational Database Service for MySQL 5.7',
      endOfSupportDeadline: DateTime(2023, 12, 31),
    ),
    AwsService(
      id: '6',
      name: 'ElastiCache for Redis 5.0',
      type: 'Cache',
      details: 'In-memory caching service for Redis 5.0',
      endOfSupportDeadline: DateTime(2024, 3, 31),
    ),
    AwsService(
      id: '7',
      name: 'EC2 Classic',
      type: 'Compute',
      details: 'Legacy EC2 platform',
      endOfSupportDeadline: DateTime(2024, 8, 15),
    ),
  ];

  static List<MigrationProject> migrationProjects = [
    MigrationProject(
      id: '1',
      name: 'ALG Ambit Technical Upgrade',
      awsServiceIds: ['1', '4'],
      assignedEmployeeId: '1',
      deadline: DateTime(2013, 12, 31),
    ),
    MigrationProject(
      id: '2',
      name: 'JOR Ambit Technical Upgrade',
      awsServiceIds: ['2'],
      assignedEmployeeId: '2',
      deadline: DateTime(2013, 12, 31),
    ),
    MigrationProject(
      id: '3',
      name: 'JOR/ALG Ambit Technical Upgrade',
      awsServiceIds: ['3'],
      assignedEmployeeId: '3',
      deadline: DateTime(2015, 12, 31),
    ),
    MigrationProject(
      id: '4',
      name: 'ETL Upgrade',
      awsServiceIds: ['4'],
      assignedEmployeeId: '1',
      deadline: DateTime(2016, 12, 31),
    ),
    MigrationProject(
      id: '5',
      name: 'Database Upgrade Project',
      awsServiceIds: ['5'],
      assignedEmployeeId: '2',
      deadline: DateTime(2023, 11, 30),
    ),
    MigrationProject(
      id: '6',
      name: 'Redis Migration',
      awsServiceIds: ['6'],
      assignedEmployeeId: '3',
      deadline: DateTime(2024, 2, 28),
    ),
    MigrationProject(
      id: '7',
      name: 'EC2 Classic Migration',
      awsServiceIds: ['7'],
      assignedEmployeeId: '1',
      deadline: DateTime(2024, 6, 30),
    ),
  ];

  static List<Employee> employees = [
    Employee(
      id: '1',
      name: 'Ali AlQattan',
      email: 'ali.alqattan@example.com',
      assignedMigrationProjectIds: ['1', '4', '7'],
    ),
    Employee(
      id: '2',
      name: 'Nelson',
      email: 'nelson@example.com',
      assignedMigrationProjectIds: ['2', '5'],
    ),
    Employee(
      id: '3',
      name: 'Ahmad Radhi',
      email: 'ahmad.radhi@example.com',
      assignedMigrationProjectIds: ['3', '6'],
    ),
  ];
}

```
aws_service.dart
```dart
import 'package:cloud_firestore/cloud_firestore.dart';

class AwsService {
  String id;
  String name;
  String type;
  String details;
  DateTime endOfSupportDeadline;
  String? migrationProjectId;

  AwsService({
    required this.id,
    required this.name,
    required this.type,
    required this.details,
    required this.endOfSupportDeadline,
    this.migrationProjectId,
  });

  factory AwsService.fromMap(Map<String, dynamic> map, String documentId) {
    return AwsService(
      id: documentId,
      name: map['name'],
      type: map['type'],
      details: map['details'],
      endOfSupportDeadline: (map['endOfSupportDeadline'] as Timestamp).toDate(),
      migrationProjectId: map['migrationProjectId'],
    );
  }

  Map<String, dynamic> toMap() {
    return {
      'name': name,
      'type': type,
      'details': details,
      'endOfSupportDeadline': Timestamp.fromDate(endOfSupportDeadline),
      'migrationProjectId': migrationProjectId,
    };
  }
}

```
employee.dart
```dart
import 'package:cloud_firestore/cloud_firestore.dart';

class Employee {
  String id;
  String name;
  String email;
  List<String> assignedMigrationProjectIds;

  Employee({
    required this.id,
    required this.name,
    required this.email,
    required this.assignedMigrationProjectIds,
  });

  factory Employee.fromMap(Map<String, dynamic> map, String documentId) {
    return Employee(
      id: documentId,
      name: map['name'],
      email: map['email'],
      assignedMigrationProjectIds: List<String>.from(map['assignedMigrationProjectIds']),
    );
  }

  Map<String, dynamic> toMap() {
    return {
      'name': name,
      'email': email,
      'assignedMigrationProjectIds': assignedMigrationProjectIds,
    };
  }
}
```
migration_project.dart
```dart
import 'package:cloud_firestore/cloud_firestore.dart';

class MigrationProject {
  String id;
  String name;
  List<String> awsServiceIds;
  String assignedEmployeeId;
  DateTime deadline;

  MigrationProject({
    required this.id,
    required this.name,
    required this.awsServiceIds,
    required this.assignedEmployeeId,
    required this.deadline,
  });

  factory MigrationProject.fromMap(Map<String, dynamic> map, String documentId) {
    return MigrationProject(
      id: documentId,
      name: map['name'],
      awsServiceIds: List<String>.from(map['awsServiceIds']),
      assignedEmployeeId: map['assignedEmployeeId'],
      deadline: (map['deadline'] as Timestamp).toDate(),
    );
  }

  Map<String, dynamic> toMap() {
    return {
      'name': name,
      'awsServiceIds': awsServiceIds,
      'assignedEmployeeId': assignedEmployeeId,
      'deadline': Timestamp.fromDate(deadline),
    };
  }
}

```
aws_service_details_page.dart
```dart
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:provider/provider.dart';
import '../providers/aws_service_provider.dart';
import '../models/aws_service.dart';

class AwsServiceDetailsPage extends StatelessWidget {
  final String id;

  const AwsServiceDetailsPage({super.key, required this.id});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('AWS Service Details')),
      body: Consumer<AwsServiceProvider>(
        builder: (context, provider, child) {
          final service = provider.awsServices.firstWhere((s) => s.id == id);
          return Center(
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                Text('Name: ${service.name}'),
                Text('Type: ${service.type}'),
                Text('Details: ${service.details}'),
                Text('End of Support: ${service.endOfSupportDeadline.toString()}'),
                ElevatedButton(
                  onPressed: () => context.go('/aws-services/edit/$id'),
                  child: const Text('Edit Service'),
                ),
                ElevatedButton(
                  onPressed: () async {
                    await provider.deleteAwsService(id);
                    context.go('/aws-services');
                  },
                  child: const Text('Delete Service'),
                ),
              ],
            ),
          );
        },
      ),
    );
  }
}

```
aws_services_list_page.dart
```dart
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:provider/provider.dart';
import '../providers/aws_service_provider.dart';
import '../models/aws_service.dart';

class AwsServicesListPage extends StatefulWidget {
  const AwsServicesListPage({super.key});

  @override
  State<AwsServicesListPage> createState() => _AwsServicesListPageState();
}

class _AwsServicesListPageState extends State<AwsServicesListPage> {
  String _searchQuery = '';

  @override
  void initState() {
    super.initState();
    Future.microtask(() => context.read<AwsServiceProvider>().fetchAwsServices());
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('AWS Services', style: Theme.of(context).textTheme.headlineSmall),
        elevation: 0,
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: [
            TextField(
              decoration: InputDecoration(
                labelText: 'Search AWS Services',
                prefixIcon: Icon(Icons.search),
                border: OutlineInputBorder(
                  borderRadius: BorderRadius.circular(10),
                ),
              ),
              onChanged: (value) {
                setState(() {
                  _searchQuery = value.toLowerCase();
                });
              },
            ),
            SizedBox(height: 16),
            Expanded(
              child: Consumer<AwsServiceProvider>(
                builder: (context, provider, child) {
                  if (provider.isLoading) {
                    return const Center(child: CircularProgressIndicator());
                  }
                  if (provider.awsServices.isEmpty) {
                    return const Center(child: Text('No AWS services found.'));
                  }
                  final filteredServices = provider.awsServices.where((service) =>
                    service.name.toLowerCase().contains(_searchQuery) ||
                    service.type.toLowerCase().contains(_searchQuery)
                  ).toList();
                  return LayoutBuilder(
                    builder: (context, constraints) {
                      return constraints.maxWidth > 600
                        ? _buildGridView(filteredServices)
                        : _buildListView(filteredServices);
                    },
                  );
                },
              ),
            ),
          ],
        ),
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: () => context.go('/aws-services/create'),
        child: Icon(Icons.add),
        tooltip: 'Add New Service',
      ),
    );
  }

  Widget _buildListView(List<AwsService> services) {
    return ListView.separated(
      itemCount: services.length,
      separatorBuilder: (context, index) => Divider(height: 1),
      itemBuilder: (context, index) {
        final service = services[index];
        return ListTile(
          title: Text(service.name, style: Theme.of(context).textTheme.titleMedium),
          subtitle: Text(service.type),
          leading: Icon(Icons.cloud, color: Theme.of(context).primaryColor),
          trailing: Icon(Icons.chevron_right),
          onTap: () => context.go('/aws-services/${service.id}'),
        );
      },
    );
  }

  Widget _buildGridView(List<AwsService> services) {
    return GridView.builder(
      gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
        crossAxisCount: 2,
        childAspectRatio: 3,
      ),
      itemCount: services.length,
      itemBuilder: (context, index) {
        final service = services[index];
        return Card(
          child: InkWell(
            onTap: () => context.go('/aws-services/${service.id}'),
            child: Padding(
              padding: const EdgeInsets.all(8.0),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(service.name, style: Theme.of(context).textTheme.titleMedium),
                  Text(service.type, style: Theme.of(context).textTheme.bodySmall),
                ],
              ),
            ),
          ),
        );
      },
    );
  }
}

```
core_page.dart
```dart
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'dashboard_page.dart';
import 'aws_services_list_page.dart';
import 'migration_projects_list_page.dart';
import 'employees_list_page.dart';
import 'settings_page.dart';

class CorePage extends StatefulWidget {
  const CorePage({super.key});

  @override
  State<CorePage> createState() => _CorePageState();
}

class _CorePageState extends State<CorePage> {
  int _selectedIndex = 0;
  static const List<Widget> _widgetOptions = <Widget>[
    DashboardPage(),
    AwsServicesListPage(),
    MigrationProjectsListPage(),
    EmployeesListPage(),
    SettingsPage(),
  ];

  void _onItemTapped(int index) {
    setState(() {
      _selectedIndex = index;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Center(
        child: _widgetOptions.elementAt(_selectedIndex),
      ),
      bottomNavigationBar: BottomNavigationBar(
        items: const <BottomNavigationBarItem>[
          BottomNavigationBarItem(
            icon: Icon(Icons.dashboard),
            label: 'Dashboard',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.cloud),
            label: 'AWS Services',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.assignment),
            label: 'Projects',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.people),
            label: 'Employees',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.settings),
            label: 'Settings',
          ),
        ],
        currentIndex: _selectedIndex,
        selectedItemColor: Theme.of(context).primaryColor,
        unselectedItemColor: Colors.grey,
        onTap: _onItemTapped,
      ),
    );
  }
}

```
create_edit_aws_service_page.dart
```dart
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:provider/provider.dart';
import '../providers/aws_service_provider.dart';
import '../models/aws_service.dart';

class CreateEditAwsServicePage extends StatefulWidget {
  final String? id;

  const CreateEditAwsServicePage({super.key, this.id});

  @override
  State<CreateEditAwsServicePage> createState() => _CreateEditAwsServicePageState();
}

class _CreateEditAwsServicePageState extends State<CreateEditAwsServicePage> {
  final _formKey = GlobalKey<FormState>();
  late String _name;
  late String _type;
  late String _details;
  late DateTime _endOfSupportDeadline;

  @override
  void initState() {
    super.initState();
    if (widget.id != null) {
      final service = context.read<AwsServiceProvider>().awsServices.firstWhere((s) => s.id == widget.id);
      _name = service.name;
      _type = service.type;
      _details = service.details;
      _endOfSupportDeadline = service.endOfSupportDeadline;
    } else {
      _name = '';
      _type = '';
      _details = '';
      _endOfSupportDeadline = DateTime.now();
    }
  }

  @override
  Widget build(BuildContext context) {
    final isEditing = widget.id != null;
    return Scaffold(
      appBar: AppBar(
        title: Text(isEditing ? 'Edit AWS Service' : 'Create AWS Service', style: Theme.of(context).textTheme.headlineSmall),
        elevation: 0,
      ),
      body: SingleChildScrollView(
        child: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Form(
            key: _formKey,
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.stretch,
              children: [
                TextFormField(
                  initialValue: _name,
                  decoration: InputDecoration(
                    labelText: 'Name',
                    border: OutlineInputBorder(),
                  ),
                  validator: (value) => value!.isEmpty ? 'Please enter a name' : null,
                  onSaved: (value) => _name = value!,
                ),
                SizedBox(height: 16),
                TextFormField(
                  initialValue: _type,
                  decoration: InputDecoration(
                    labelText: 'Type',
                    border: OutlineInputBorder(),
                  ),
                  validator: (value) => value!.isEmpty ? 'Please enter a type' : null,
                  onSaved: (value) => _type = value!,
                ),
                SizedBox(height: 16),
                TextFormField(
                  initialValue: _details,
                  decoration: InputDecoration(
                    labelText: 'Details',
                    border: OutlineInputBorder(),
                  ),
                  maxLines: 3,
                  validator: (value) => value!.isEmpty ? 'Please enter details' : null,
                  onSaved: (value) => _details = value!,
                ),
                SizedBox(height: 16),
                ElevatedButton.icon(
                  onPressed: () async {
                    final date = await showDatePicker(
                      context: context,
                      initialDate: _endOfSupportDeadline,
                      firstDate: DateTime.now(),
                      lastDate: DateTime.now().add(const Duration(days: 365 * 10)),
                    );
                    if (date != null) {
                      setState(() => _endOfSupportDeadline = date);
                    }
                  },
                  icon: Icon(Icons.calendar_today),
                  label: Text('End of Support: ${_endOfSupportDeadline.toString().split(' ')[0]}'),
                ),
                SizedBox(height: 24),
                ElevatedButton(
                  onPressed: _saveForm,
                  child: Text(isEditing ? 'Update' : 'Create'),
                  style: ElevatedButton.styleFrom(
                    padding: EdgeInsets.symmetric(vertical: 16),
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  void _saveForm() async {
    if (_formKey.currentState!.validate()) {
      _formKey.currentState!.save();
      final provider = context.read<AwsServiceProvider>();
      final service = AwsService(
        id: widget.id ?? '',
        name: _name,
        type: _type,
        details: _details,
        endOfSupportDeadline: _endOfSupportDeadline,
      );
      if (widget.id != null) {
        await provider.updateAwsService(service);
      } else {
        await provider.addAwsService(service);
      }
      context.go('/aws-services');
    }
  }
}

```
create_edit_employee_page.dart
```dart
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:provider/provider.dart';
import '../providers/employee_provider.dart';
import '../models/employee.dart';

class CreateEditEmployeePage extends StatefulWidget {
  final String? id;

  const CreateEditEmployeePage({super.key, this.id});

  @override
  State<CreateEditEmployeePage> createState() => _CreateEditEmployeePageState();
}

class _CreateEditEmployeePageState extends State<CreateEditEmployeePage> {
  final _formKey = GlobalKey<FormState>();
  late String _name;
  late String _email;

  @override
  void initState() {
    super.initState();
    if (widget.id != null) {
      final employee = context.read<EmployeeProvider>().employees.firstWhere((e) => e.id == widget.id);
      _name = employee.name;
      _email = employee.email;
    } else {
      _name = '';
      _email = '';
    }
  }

  @override
  Widget build(BuildContext context) {
    final isEditing = widget.id != null;
    return Scaffold(
      appBar: AppBar(
        title: Text(isEditing ? 'Edit Employee' : 'Create Employee'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Form(
          key: _formKey,
          child: Column(
            children: [
              TextFormField(
                initialValue: _name,
                decoration: const InputDecoration(labelText: 'Name'),
                validator: (value) => value!.isEmpty ? 'Please enter a name' : null,
                onSaved: (value) => _name = value!,
              ),
              TextFormField(
                initialValue: _email,
                decoration: const InputDecoration(labelText: 'Email'),
                validator: (value) => value!.isEmpty ? 'Please enter an email' : null,
                onSaved: (value) => _email = value!,
              ),
              ElevatedButton(
                onPressed: () async {
                  if (_formKey.currentState!.validate()) {
                    _formKey.currentState!.save();
                    final provider = context.read<EmployeeProvider>();
                    final employee = Employee(
                      id: widget.id ?? '',
                      name: _name,
                      email: _email,
                      assignedMigrationProjectIds: [],
                    );
                    if (isEditing) {
                      await provider.updateEmployee(employee);
                    } else {
                      await provider.addEmployee(employee);
                    }
                    context.go('/employees');
                  }
                },
                child: Text(isEditing ? 'Update' : 'Create'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

```
create_edit_migration_project_page.dart
```dart
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:provider/provider.dart';
import '../providers/migration_project_provider.dart';
import '../models/migration_project.dart';

class CreateEditMigrationProjectPage extends StatefulWidget {
  final String? id;

  const CreateEditMigrationProjectPage({super.key, this.id});

  @override
  State<CreateEditMigrationProjectPage> createState() => _CreateEditMigrationProjectPageState();
}

class _CreateEditMigrationProjectPageState extends State<CreateEditMigrationProjectPage> {
  final _formKey = GlobalKey<FormState>();
  late String _name;
  late DateTime _deadline;
  late String _assignedEmployeeId;
  List<String> _awsServiceIds = [];

  @override
  void initState() {
    super.initState();
    if (widget.id != null) {
      final project = context.read<MigrationProjectProvider>().migrationProjects.firstWhere((p) => p.id == widget.id);
      _name = project.name;
      _deadline = project.deadline;
      _assignedEmployeeId = project.assignedEmployeeId;
      _awsServiceIds = project.awsServiceIds;
    } else {
      _name = '';
      _deadline = DateTime.now().add(const Duration(days: 30));
      _assignedEmployeeId = '';
    }
  }

  @override
  Widget build(BuildContext context) {
    final isEditing = widget.id != null;
    return Scaffold(
      appBar: AppBar(
        title: Text(isEditing ? 'Edit Migration Project' : 'Create Migration Project'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Form(
          key: _formKey,
          child: Column(
            children: [
              TextFormField(
                initialValue: _name,
                decoration: const InputDecoration(labelText: 'Name'),
                validator: (value) => value!.isEmpty ? 'Please enter a name' : null,
                onSaved: (value) => _name = value!,
              ),
              ElevatedButton(
                onPressed: () async {
                  final date = await showDatePicker(
                    context: context,
                    initialDate: _deadline,
                    firstDate: DateTime.now(),
                    lastDate: DateTime.now().add(const Duration(days: 365 * 10)),
                  );
                  if (date != null) {
                    setState(() => _deadline = date);
                  }
                },
                child: Text('Deadline: ${_deadline.toString().split(' ')[0]}'),
              ),
              TextFormField(
                initialValue: _assignedEmployeeId,
                decoration: const InputDecoration(labelText: 'Assigned Employee ID'),
                validator: (value) => value!.isEmpty ? 'Please enter an employee ID' : null,
                onSaved: (value) => _assignedEmployeeId = value!,
              ),
              // TODO: Implement multi-select for AWS services
              ElevatedButton(
                onPressed: () async {
                  if (_formKey.currentState!.validate()) {
                    _formKey.currentState!.save();
                    final provider = context.read<MigrationProjectProvider>();
                    final project = MigrationProject(
                      id: widget.id ?? '',
                      name: _name,
                      deadline: _deadline,
                      assignedEmployeeId: _assignedEmployeeId,
                      awsServiceIds: _awsServiceIds,
                    );
                    if (isEditing) {
                      await provider.updateMigrationProject(project);
                    } else {
                      await provider.addMigrationProject(project);
                    }
                    context.go('/migration-projects');
                  }
                },
                child: Text(isEditing ? 'Update' : 'Create'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

```
dashboard_page.dart
```dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../providers/aws_service_provider.dart';
import '../providers/migration_project_provider.dart';
import '../providers/employee_provider.dart';

class DashboardPage extends StatefulWidget {
  const DashboardPage({super.key});

  @override
  State<DashboardPage> createState() => _DashboardPageState();
}

class _DashboardPageState extends State<DashboardPage> {
  @override
  void initState() {
    super.initState();
    Future.microtask(() {
      context.read<AwsServiceProvider>().fetchAwsServices();
      context.read<MigrationProjectProvider>().fetchMigrationProjects();
      context.read<EmployeeProvider>().fetchEmployees();
    });
  }

  @override
  Widget build(BuildContext context) {
    return Consumer3<AwsServiceProvider, MigrationProjectProvider, EmployeeProvider>(
      builder: (context, awsProvider, projectProvider, employeeProvider, child) {
        bool isLoading = awsProvider.isLoading || projectProvider.isLoading || employeeProvider.isLoading;

        return Scaffold(
          appBar: AppBar(
            title: Text('Dashboard', style: Theme.of(context).textTheme.headlineSmall),
            elevation: 0,
          ),
          body: isLoading
              ? Center(child: CircularProgressIndicator())
              : SingleChildScrollView(
                  child: Padding(
                    padding: const EdgeInsets.all(16.0),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text('Overview', style: Theme.of(context).textTheme.headlineMedium),
                        SizedBox(height: 16),
                        _buildSummaryCards(context, awsProvider, projectProvider, employeeProvider),
                        SizedBox(height: 24),
                        Text('Upcoming Deadlines', style: Theme.of(context).textTheme.headlineSmall),
                        SizedBox(height: 8),
                        _buildUpcomingDeadlinesList(context, projectProvider),
                      ],
                    ),
                  ),
                ),
        );
      },
    );
  }

  Widget _buildSummaryCards(BuildContext context, AwsServiceProvider awsProvider, MigrationProjectProvider projectProvider, EmployeeProvider employeeProvider) {
    return LayoutBuilder(
      builder: (context, constraints) {
        return GridView.count(
          crossAxisCount: constraints.maxWidth > 700 ? 4 : 2,
          crossAxisSpacing: 16,
          mainAxisSpacing: 16,
          shrinkWrap: true,
          physics: NeverScrollableScrollPhysics(),
          children: [
            _buildSummaryCard(context, 'AWS Services', awsProvider.awsServices.length.toString(), Icons.cloud),
            _buildSummaryCard(context, 'Migration Projects', projectProvider.migrationProjects.length.toString(), Icons.assignment),
            _buildSummaryCard(context, 'Employees', employeeProvider.employees.length.toString(), Icons.people),
            _buildSummaryCard(context, 'Pending Tasks', '5', Icons.pending_actions),
          ],
        );
      }
    );
  }

  Widget _buildSummaryCard(BuildContext context, String title, String value, IconData icon) {
    return Card(
      elevation: 2,
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(icon, size: 48, color: Theme.of(context).primaryColor),
            SizedBox(height: 8),
            Text(title, style: Theme.of(context).textTheme.titleMedium),
            Text(value, style: Theme.of(context).textTheme.headlineMedium?.copyWith(color: Theme.of(context).primaryColor)),
          ],
        ),
      ),
    );
  }

  Widget _buildUpcomingDeadlinesList(BuildContext context, MigrationProjectProvider provider) {
    final upcomingProjects = provider.migrationProjects
        .where((p) => p.deadline.isAfter(DateTime.now()))
        .toList()
      ..sort((a, b) => a.deadline.compareTo(b.deadline));

    return Card(
      elevation: 1,
      child: ListView.separated(
        shrinkWrap: true,
        physics: NeverScrollableScrollPhysics(),
        itemCount: upcomingProjects.length,
        separatorBuilder: (context, index) => Divider(height: 1),
        itemBuilder: (context, index) {
          final project = upcomingProjects[index];
          return ListTile(
            title: Text(project.name, style: Theme.of(context).textTheme.titleMedium),
            subtitle: Text('Deadline: ${project.deadline.toString().split(' ')[0]}'),
            leading: CircleAvatar(child: Text('${index + 1}')),
            trailing: Icon(Icons.chevron_right),
            onTap: () => Navigator.pushNamed(context, '/migration-projects/${project.id}'),
          );
        },
      ),
    );
  }
}

```
employee_details_page.dart
```dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:go_router/go_router.dart';
import '../providers/employee_provider.dart';
import '../providers/migration_project_provider.dart';
import '../models/employee.dart';
import '../models/migration_project.dart';

class EmployeeDetailsPage extends StatelessWidget {
  final String id;

  const EmployeeDetailsPage({super.key, required this.id});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Employee Details')),
      body: Consumer2<EmployeeProvider, MigrationProjectProvider>(
        builder: (context, employeeProvider, projectProvider, child) {
          final employee = employeeProvider.employees.firstWhere((e) => e.id == id);
          final assignedProjects = projectProvider.migrationProjects
              .where((p) => employee.assignedMigrationProjectIds.contains(p.id))
              .toList();

          return Padding(
            padding: const EdgeInsets.all(16.0),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text('Name: ${employee.name}', style: Theme.of(context).textTheme.titleLarge),
                Text('Email: ${employee.email}', style: Theme.of(context).textTheme.bodyLarge),
                SizedBox(height: 16),
                Text('Assigned Projects:', style: Theme.of(context).textTheme.titleLarge),
                Expanded(
                  child: ListView.builder(
                    itemCount: assignedProjects.length,
                    itemBuilder: (context, index) {
                      final project = assignedProjects[index];
                      return ListTile(
                        title: Text(project.name),
                        subtitle: Text('Deadline: ${project.deadline.toString().split(' ')[0]}'),
                        onTap: () => context.go('/migration-projects/${project.id}'),
                      );
                    },
                  ),
                ),
                ElevatedButton(
                  onPressed: () => context.go('/employees/edit/$id'),
                  child: const Text('Edit Employee'),
                ),
              ],
            ),
          );
        },
      ),
    );
  }
}

```
employees_list_page.dart
```dart
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:provider/provider.dart';
import '../providers/employee_provider.dart';
import '../models/employee.dart';

class EmployeesListPage extends StatefulWidget {
  const EmployeesListPage({super.key});

  @override
  State<EmployeesListPage> createState() => _EmployeesListPageState();
}

class _EmployeesListPageState extends State<EmployeesListPage> {
  String _searchQuery = '';

  @override
  void initState() {
    super.initState();
    Future.microtask(() => context.read<EmployeeProvider>().fetchEmployees());
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Employees', style: Theme.of(context).textTheme.headlineSmall),
        elevation: 0,
      ),
      body: Column(
        children: [
          Padding(
            padding: const EdgeInsets.all(16.0),
            child: TextField(
              decoration: InputDecoration(
                labelText: 'Search Employees',
                prefixIcon: Icon(Icons.search),
                border: OutlineInputBorder(
                  borderRadius: BorderRadius.circular(10),
                ),
              ),
              onChanged: (value) {
                setState(() {
                  _searchQuery = value.toLowerCase();
                });
              },
            ),
          ),
          Expanded(
            child: Consumer<EmployeeProvider>(
              builder: (context, provider, child) {
                if (provider.employees.isEmpty) {
                  return const Center(child: CircularProgressIndicator());
                }
                final filteredEmployees = provider.employees.where((employee) =>
                  employee.name.toLowerCase().contains(_searchQuery) ||
                  employee.email.toLowerCase().contains(_searchQuery)
                ).toList();
                return ListView.separated(
                  itemCount: filteredEmployees.length,
                  separatorBuilder: (context, index) => Divider(height: 1),
                  itemBuilder: (context, index) {
                    final employee = filteredEmployees[index];
                    return ListTile(
                      title: Text(employee.name, style: Theme.of(context).textTheme.titleMedium),
                      subtitle: Text(employee.email),
                      leading: CircleAvatar(child: Text(employee.name[0])),
                      trailing: Icon(Icons.chevron_right),
                      onTap: () => context.go('/employees/${employee.id}'),
                    );
                  },
                );
              },
            ),
          ),
        ],
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: () => context.go('/employees/create'),
        child: Icon(Icons.add),
        tooltip: 'Add New Employee',
      ),
    );
  }
}

```
login_page.dart
```dart
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import '../services/firebase_service.dart';

class LoginPage extends StatefulWidget {
  const LoginPage({super.key});

  @override
  State<LoginPage> createState() => _LoginPageState();
}

class _LoginPageState extends State<LoginPage> {
  final _formKey = GlobalKey<FormState>();
  String _email = '';
  String _password = '';
  String _errorMessage = '';

  Future<void> _login() async {
    if (_formKey.currentState!.validate()) {
      _formKey.currentState!.save();
      try {
        await FirebaseService.signIn(_email, _password);
        context.go('/dashboard');
      } catch (e) {
        setState(() {
          _errorMessage = e.toString();
        });
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Login')),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Form(
          key: _formKey,
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              TextFormField(
                decoration: const InputDecoration(labelText: 'Email'),
                validator: (value) => value!.isEmpty ? 'Please enter your email' : null,
                onSaved: (value) => _email = value!,
              ),
              TextFormField(
                decoration: const InputDecoration(labelText: 'Password'),
                obscureText: true,
                validator: (value) => value!.isEmpty ? 'Please enter your password' : null,
                onSaved: (value) => _password = value!,
              ),
              const SizedBox(height: 16),
              ElevatedButton(
                onPressed: _login,
                child: const Text('Login'),
              ),
              if (_errorMessage.isNotEmpty)
                Padding(
                  padding: const EdgeInsets.only(top: 16),
                  child: Text(_errorMessage, style: TextStyle(color: Colors.red)),
                ),
            ],
          ),
        ),
      ),
    );
  }
}

```
migration_project_details_page.dart
```dart
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:provider/provider.dart';
import '../providers/migration_project_provider.dart';
import '../models/migration_project.dart';

class MigrationProjectDetailsPage extends StatelessWidget {
  final String id;

  const MigrationProjectDetailsPage({super.key, required this.id});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Migration Project Details')),
      body: Consumer<MigrationProjectProvider>(
        builder: (context, provider, child) {
          final project = provider.migrationProjects.firstWhere((p) => p.id == id);
          return Center(
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                Text('Name: ${project.name}'),
                Text('Deadline: ${project.deadline.toString().split(' ')[0]}'),
                Text('Assigned Employee ID: ${project.assignedEmployeeId}'),
                Text('AWS Services: ${project.awsServiceIds.join(', ')}'),
                ElevatedButton(
                  onPressed: () => context.go('/migration-projects/edit/$id'),
                  child: const Text('Edit Project'),
                ),
                ElevatedButton(
                  onPressed: () async {
                    await provider.deleteMigrationProject(id);
                    context.go('/migration-projects');
                  },
                  child: const Text('Delete Project'),
                ),
              ],
            ),
          );
        },
      ),
    );
  }
}

```
migration_projects_list_page.dart
```dart
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:provider/provider.dart';
import '../providers/migration_project_provider.dart';
import '../models/migration_project.dart';

class MigrationProjectsListPage extends StatefulWidget {
  const MigrationProjectsListPage({super.key});

  @override
  State<MigrationProjectsListPage> createState() => _MigrationProjectsListPageState();
}

class _MigrationProjectsListPageState extends State<MigrationProjectsListPage> {
  String _searchQuery = '';

  @override
  void initState() {
    super.initState();
    Future.microtask(() => context.read<MigrationProjectProvider>().fetchMigrationProjects());
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Migration Projects', style: Theme.of(context).textTheme.headlineSmall),
        elevation: 0,
      ),
      body: Column(
        children: [
          Padding(
            padding: const EdgeInsets.all(16.0),
            child: TextField(
              decoration: InputDecoration(
                labelText: 'Search Migration Projects',
                prefixIcon: Icon(Icons.search),
                border: OutlineInputBorder(
                  borderRadius: BorderRadius.circular(10),
                ),
              ),
              onChanged: (value) {
                setState(() {
                  _searchQuery = value.toLowerCase();
                });
              },
            ),
          ),
          Expanded(
            child: Consumer<MigrationProjectProvider>(
              builder: (context, provider, child) {
                if (provider.migrationProjects.isEmpty) {
                  return const Center(child: CircularProgressIndicator());
                }
                final filteredProjects = provider.migrationProjects.where((project) =>
                  project.name.toLowerCase().contains(_searchQuery)
                ).toList();
                return ListView.separated(
                  itemCount: filteredProjects.length,
                  separatorBuilder: (context, index) => Divider(height: 1),
                  itemBuilder: (context, index) {
                    final project = filteredProjects[index];
                    return ListTile(
                      title: Text(project.name, style: Theme.of(context).textTheme.titleMedium),
                      subtitle: Text('Deadline: ${project.deadline.toString().split(' ')[0]}'),
                      leading: Icon(Icons.assignment, color: Theme.of(context).primaryColor),
                      trailing: Icon(Icons.chevron_right),
                      onTap: () => context.go('/migration-projects/${project.id}'),
                    );
                  },
                );
              },
            ),
          ),
        ],
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: () => context.go('/migration-projects/create'),
        child: Icon(Icons.add),
        tooltip: 'Add New Project',
      ),
    );
  }
}

```
settings_page.dart
```dart
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:provider/provider.dart';
import '../services/firebase_service.dart';
import '../providers/theme_provider.dart';

class SettingsPage extends StatelessWidget {
  const SettingsPage({super.key});

  @override
  Widget build(BuildContext context) {
    final themeProvider = Provider.of<ThemeProvider>(context);

    return Scaffold(
      appBar: AppBar(
        title: Text('Settings', style: Theme.of(context).textTheme.headlineSmall),
        elevation: 0,
      ),
      body: ListView(
        children: [
          ListTile(
            title: Text('Dark Mode'),
            subtitle: Text(themeProvider.isDarkMode ? 'On' : 'Off'),
            leading: Icon(themeProvider.isDarkMode ? Icons.dark_mode : Icons.light_mode),
            trailing: Switch(
              value: themeProvider.isDarkMode,
              onChanged: (value) {
                themeProvider.toggleTheme(value);
              },
            ),
          ),
          ListTile(
            title: Text('Notifications'),
            subtitle: Text('On'),
            leading: Icon(Icons.notifications),
            trailing: Switch(
              value: true,
              onChanged: (value) {
                // TODO: Implement notifications toggle
              },
            ),
          ),
          ListTile(
            title: Text('About'),
            leading: Icon(Icons.info),
            trailing: Icon(Icons.chevron_right),
            onTap: () {
              // TODO: Show about dialog
            },
          ),
          Divider(),
          ListTile(
            title: Text('Logout'),
            leading: Icon(Icons.exit_to_app),
            onTap: () async {
              await FirebaseService.signOut();
              context.go('/login');
            },
          ),
        ],
      ),
    );
  }
}

```
aws_service_provider.dart
```dart
import 'package:flutter/foundation.dart';
import '../models/aws_service.dart';
import '../mock_data.dart';
import '../services/firebase_service.dart';

class AwsServiceProvider extends ChangeNotifier {
  List<AwsService> _awsServices = [];
  bool _isLoading = false;

  List<AwsService> get awsServices => _awsServices;
  bool get isLoading => _isLoading;

  AwsServiceProvider() {
    _awsServices = MockData.awsServices;
  }

  Future<void> fetchAwsServices() async {
    _isLoading = true;
    notifyListeners();

    try {
      // In a real app, this would fetch from Firestore
      // For now, we'll just use the mock data with a delay to simulate network request
      await Future.delayed(Duration(seconds: 1));
      _awsServices = MockData.awsServices;
    } catch (e) {
      print('Error fetching AWS services: $e');
    } finally {
      _isLoading = false;
      notifyListeners();
    }
  }

  Future<void> addAwsService(AwsService service) async {
    try {
      final docRef = await FirebaseService.firestore.collection('aws_services').add(service.toMap());
      service.id = docRef.id;
      _awsServices.add(service);
      notifyListeners();
    } catch (e) {
      print('Error adding AWS service: $e');
    }
  }

  Future<void> updateAwsService(AwsService service) async {
    try {
      await FirebaseService.firestore.collection('aws_services').doc(service.id).update(service.toMap());
      final index = _awsServices.indexWhere((s) => s.id == service.id);
      if (index != -1) {
        _awsServices[index] = service;
        notifyListeners();
      }
    } catch (e) {
      print('Error updating AWS service: $e');
    }
  }

  Future<void> deleteAwsService(String id) async {
    try {
      await FirebaseService.firestore.collection('aws_services').doc(id).delete();
      _awsServices.removeWhere((s) => s.id == id);
      notifyListeners();
    } catch (e) {
      print('Error deleting AWS service: $e');
    }
  }
}

```
employee_provider.dart
```dart
import 'package:flutter/foundation.dart';
import '../models/employee.dart';
import '../mock_data.dart';
import '../services/firebase_service.dart';

class EmployeeProvider extends ChangeNotifier {
  List<Employee> _employees = [];
  bool _isLoading = false;

  List<Employee> get employees => _employees;
  bool get isLoading => _isLoading;

  EmployeeProvider() {
    _employees = MockData.employees;
  }

  Future<void> fetchEmployees() async {
    _isLoading = true;
    notifyListeners();

    try {
      // In a real app, this would fetch from Firestore
      // For now, we'll just use the mock data with a delay to simulate network request
      await Future.delayed(Duration(seconds: 1));
      _employees = MockData.employees;
    } catch (e) {
      print('Error fetching employees: $e');
    } finally {
      _isLoading = false;
      notifyListeners();
    }
  }

  Future<void> addEmployee(Employee employee) async {
    try {
      final docRef = await FirebaseService.firestore.collection('employees').add(employee.toMap());
      employee.id = docRef.id;
      _employees.add(employee);
      notifyListeners();
    } catch (e) {
      print('Error adding employee: $e');
    }
  }

  Future<void> updateEmployee(Employee employee) async {
    try {
      await FirebaseService.firestore.collection('employees').doc(employee.id).update(employee.toMap());
      final index = _employees.indexWhere((e) => e.id == employee.id);
      if (index != -1) {
        _employees[index] = employee;
        notifyListeners();
      }
    } catch (e) {
      print('Error updating employee: $e');
    }
  }

  Future<void> deleteEmployee(String id) async {
    try {
      await FirebaseService.firestore.collection('employees').doc(id).delete();
      _employees.removeWhere((e) => e.id == id);
      notifyListeners();
    } catch (e) {
      print('Error deleting employee: $e');
    }
  }
}

```
migration_project_provider.dart
```dart
import 'package:flutter/foundation.dart';
import '../models/migration_project.dart';
import '../mock_data.dart';
import '../services/firebase_service.dart';

class MigrationProjectProvider extends ChangeNotifier {
  List<MigrationProject> _migrationProjects = [];
  bool _isLoading = false;

  List<MigrationProject> get migrationProjects => _migrationProjects;
  bool get isLoading => _isLoading;

  MigrationProjectProvider() {
    _migrationProjects = MockData.migrationProjects;
  }

  Future<void> fetchMigrationProjects() async {
    _isLoading = true;
    notifyListeners();

    try {
      // In a real app, this would fetch from Firestore
      // For now, we'll just use the mock data with a delay to simulate network request
      await Future.delayed(Duration(seconds: 1));
      _migrationProjects = MockData.migrationProjects;
    } catch (e) {
      print('Error fetching migration projects: $e');
    } finally {
      _isLoading = false;
      notifyListeners();
    }
  }

  Future<void> addMigrationProject(MigrationProject project) async {
    try {
      final docRef = await FirebaseService.firestore.collection('migration_projects').add(project.toMap());
      project.id = docRef.id;
      _migrationProjects.add(project);
      notifyListeners();
    } catch (e) {
      print('Error adding migration project: $e');
    }
  }

  Future<void> updateMigrationProject(MigrationProject project) async {
    try {
      await FirebaseService.firestore.collection('migration_projects').doc(project.id).update(project.toMap());
      final index = _migrationProjects.indexWhere((p) => p.id == project.id);
      if (index != -1) {
        _migrationProjects[index] = project;
        notifyListeners();
      }
    } catch (e) {
      print('Error updating migration project: $e');
    }
  }

  Future<void> deleteMigrationProject(String id) async {
    try {
      await FirebaseService.firestore.collection('migration_projects').doc(id).delete();
      _migrationProjects.removeWhere((p) => p.id == id);
      notifyListeners();
    } catch (e) {
      print('Error deleting migration project: $e');
    }
  }
}

```
theme_provider.dart
```dart
import 'package:flutter/material.dart';

class ThemeProvider extends ChangeNotifier {
  ThemeMode _themeMode = ThemeMode.light;

  ThemeMode get themeMode => _themeMode;

  bool get isDarkMode => _themeMode == ThemeMode.dark;

  void toggleTheme(bool isOn) {
    _themeMode = isOn ? ThemeMode.dark : ThemeMode.light;
    notifyListeners();
  }
}

```
app_router.dart
```dart
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import '../pages/core_page.dart';
import '../pages/aws_service_details_page.dart';
import '../pages/migration_project_details_page.dart';
import '../pages/create_edit_aws_service_page.dart';
import '../pages/create_edit_migration_project_page.dart';
import '../pages/employee_details_page.dart';
import '../pages/create_edit_employee_page.dart';
import '../pages/dashboard_page.dart';

class AppRouter {
  static final router = GoRouter(
    initialLocation: '/',
    routes: [
      GoRoute(
        path: '/',
        builder: (context, state) => const CorePage(),
      ),
      GoRoute(
        path: '/aws-services/:id',
        builder: (context, state) => AwsServiceDetailsPage(id: state.pathParameters['id']!),
      ),
      GoRoute(
        path: '/migration-projects/:id',
        builder: (context, state) => MigrationProjectDetailsPage(id: state.pathParameters['id']!),
      ),
      GoRoute(
        path: '/aws-services/create',
        builder: (context, state) => const CreateEditAwsServicePage(),
      ),
      GoRoute(
        path: '/aws-services/edit/:id',
        builder: (context, state) => CreateEditAwsServicePage(id: state.pathParameters['id']),
      ),
      GoRoute(
        path: '/migration-projects/create',
        builder: (context, state) => const CreateEditMigrationProjectPage(),
      ),
      GoRoute(
        path: '/migration-projects/edit/:id',
        builder: (context, state) => CreateEditMigrationProjectPage(id: state.pathParameters['id']),
      ),
      GoRoute(
        path: '/employees/:id',
        builder: (context, state) => EmployeeDetailsPage(id: state.pathParameters['id']!),
      ),
      GoRoute(
        path: '/employees/create',
        builder: (context, state) => const CreateEditEmployeePage(),
      ),
      GoRoute(
        path: '/employees/edit/:id',
        builder: (context, state) => CreateEditEmployeePage(id: state.pathParameters['id']),
      ),
      GoRoute(
        path: '/dashboard',
        builder: (context, state) => const DashboardPage(),
      ),
    ],
  );
}

```
firebase_service.dart
```dart
import 'package:firebase_core/firebase_core.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';

class FirebaseService {
  static Future<void> initializeFirebase() async {
    // Firebase is already initialized in main.dart, so we don't need to do it here
  }

  static FirebaseFirestore get firestore => FirebaseFirestore.instance;
  static FirebaseAuth get auth => FirebaseAuth.instance;

  static Future<UserCredential> signIn(String email, String password) async {
    return await auth.signInWithEmailAndPassword(email: email, password: password);
  }

  static Future<void> signOut() async {
    await auth.signOut();
  }

  static User? get currentUser => auth.currentUser;

  // TODO: Implement methods for Firestore CRUD operations and authentication
}

```
